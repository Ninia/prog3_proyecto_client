package ud.binmonkey.prog3_proyecto_client.gui;

import org.json.JSONArray;
import org.json.JSONObject;
import ud.binmonkey.prog3_proyecto_client.https.HTTPSClient;

import javax.swing.*;
import javax.swing.tree.DefaultMutableTreeNode;
import java.awt.*;

public class HomeForm {
    public JPanel mainHolePanel;
    public JTree userFileSysTree;
    public JPanel activitiesPanel;
    public JScrollPane userFileSysScrollPane;

    public HomeForm() {
        $$$setupUI$$$();
        loadFileSysTree();
    }

    /**
     * Loads the ftp files of the users to @userFileSysTree
     */
    public void loadFileSysTree() {

        /* init https client */
        HTTPSClient client = new HTTPSClient();

        /* Load user files and dirs */
        JSONObject fileSys = client.parseDirResponse(client.listDir(
                MainWindow.INSTANCE.getFrame().getUser(), null, MainWindow.INSTANCE.getFrame().getToken()
        ));

        /* root node with username */
        DefaultMutableTreeNode root = new DefaultMutableTreeNode(MainWindow.INSTANCE.getFrame().getUser());

        /* load files */
        for (Object fileName : (JSONArray) fileSys.get("files")) {
            if (fileName instanceof String) {
                root.add(new DefaultMutableTreeNode(fileName));
            }
        }

        /* load dirs*/
        for (Object key : ((JSONObject) fileSys.get("directories")).keySet()) {
            if (key instanceof String) {
                root.add(loadNode((String) key, (JSONObject) ((JSONObject) fileSys.get("directories")).get((String) key)));
            }
        }

        userFileSysTree = new JTree(root);

    }

    /**
     * Loads a node containing information about a directory
     *
     * @param name    name of the directory
     * @param fileSys JSONObject with content of directory
     * @return node containing information about a directory
     */
    public DefaultMutableTreeNode loadNode(String name, JSONObject fileSys) {

        /* root component of this node */
        DefaultMutableTreeNode node = new DefaultMutableTreeNode(name);

        /* load files */
        for (Object dir : ((JSONArray) fileSys.get("files"))) {
            if (dir instanceof String) {
                node.add(new DefaultMutableTreeNode(dir));
            }
        }

        /* load dirs */
        for (Object dir : ((JSONObject) fileSys.get("directories")).keySet()) {
            if (dir instanceof String) {
                node.add(loadNode((String) dir, (JSONObject) ((JSONObject) fileSys.get("directories")).get((String) dir)));
            }
        }

        return node;
    }


    private void createUIComponents() {
        // TODO: place custom component creation code here
        loadFileSysTree();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        createUIComponents();
        mainHolePanel = new JPanel();
        mainHolePanel.setLayout(new BorderLayout(0, 0));
        activitiesPanel = new JPanel();
        activitiesPanel.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(1, 2, new Insets(0, 0, 0, 0), -1, -1));
        mainHolePanel.add(activitiesPanel, BorderLayout.CENTER);
        final com.intellij.uiDesigner.core.Spacer spacer1 = new com.intellij.uiDesigner.core.Spacer();
        activitiesPanel.add(spacer1, new com.intellij.uiDesigner.core.GridConstraints(0, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        userFileSysScrollPane = new JScrollPane();
        activitiesPanel.add(userFileSysScrollPane, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        userFileSysScrollPane.setViewportView(userFileSysTree);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return mainHolePanel;
    }
}
